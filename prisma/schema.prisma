// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== NextAuth core models =====

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts     Account[]
  sessions     Session[]
  notes        Note[]
  userSettings UserSettings?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model UserSettings {
  id           String   @id @default(cuid())
  userId       String   @unique
  weatherCity  String?
  weatherUnits String   @default("metric") // "metric" | "imperial"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ===== App models =====

enum NoteStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Note {
  id        Int        @id @default(autoincrement())
  userId    String
  title     String
  content   String?
  status    NoteStatus @default(TODO)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
}
